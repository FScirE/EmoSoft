[
  {
    "name": "Cool session",
    "ID": 1715597795872,
    "date": "2024-05-13",
    "dataPoints": [
      {
        "time": 0,
        "focusValue": 50,
        "calmValue": 50,
        "function": "rgb_to_color"
      },
      {
        "time": 10,
        "focusValue": 50,
        "calmValue": 50,
        "function": "rgb_to_color"
      },
      {
        "time": 20,
        "focusValue": 50,
        "calmValue": 50,
        "function": "rgb_to_color"
      },
      {
        "time": 30,
        "focusValue": 50,
        "calmValue": 50,
        "function": "drop"
      },
      {
        "time": 40,
        "focusValue": 50,
        "calmValue": 50,
        "function": "No function"
      },
      {
        "time": 50,
        "focusValue": 50,
        "calmValue": 50,
        "function": "drop"
      },
      {
        "time": 60,
        "focusValue": 50,
        "calmValue": 50,
        "function": "move_arm"
      },
      {
        "time": 70,
        "focusValue": 50,
        "calmValue": 50,
        "function": "move_arm"
      },
      {
        "time": 80,
        "focusValue": 50,
        "calmValue": 50,
        "function": "move_arm"
      },
      {
        "time": 90,
        "focusValue": 50,
        "calmValue": 50,
        "function": "move_arm"
      }
    ],
    "topfuncs": [
      [
        "move_arm",
        84
      ],
      [
        "rgb_to_color",
        51
      ],
      [
        "drop",
        26
      ]
    ],
    "functionContents": {
      "rgb_to_color": "def rgb_to_color(rgb):\r\n    if rgb[0] > (rgb[1] + rgb[2]) / 2:\r\n        if (rgb[1] >= rgb[0] / 4) and rgb[1] > 1:\r\n            return \"YELLOW\"\r\n        return \"RED\"\r\n    elif rgb[1] + 1 > (rgb[0] + rgb[2]) / 2:\r\n        return \"GREEN\"\r\n    elif rgb[2] > (rgb[0] + rgb[1]) / 2:\r\n        return \"BLUE\"\r\n    return \"None\"\r\n",
      "drop": "def drop(position): #redundant\r\n    #move claw above\r\n    elbow_motor.run_target(60,15)\r\n\r\n    #move claw to position\r\n    base_motor.run_target(150, position[0])\r\n    elbow_motor.run_target(60, position[1])\r\n\r\n    #drop brick\r\n    gripper_motor.run_target(200,-90)\r\n\r\n    #reset claw position\r\n    elbow_motor.run_target(60,0)\r\n",
      "is_present": "def is_present():\r\n    angle = int(gripper_motor.angle())\r\n    if angle < -10:\r\n        return True\r\n    return False\r\n",
      "move_arm": "def move_arm():\r\n    #reset arm\r\n    elbow_motor.run_target(60, 15)\r\n    base_motor.run_target(150, 0)\r\n    ev3.screen.draw_text(0, 50, \"Move arm\")\r\n\r\n    #move arm\r\n    while True:\r\n        pressed = ev3.buttons.pressed()\r\n        if Button.LEFT in pressed:\r\n            base_motor.run(50)\r\n        elif Button.RIGHT in pressed:\r\n            base_motor.run(-50)\r\n        elif Button.UP in pressed:\r\n            elbow_motor.run(20)\r\n        elif Button.DOWN in pressed:\r\n            elbow_motor.run(-20)\r\n        elif Button.CENTER in pressed:\r\n            break\r\n        else:\r\n            base_motor.brake()\r\n            elbow_motor.brake()\r\n\r\n    #save arm position\r\n    pos = base_motor.angle()\r\n    hgt = elbow_motor.angle()\r\n\r\n    #reset arm\r\n    elbow_motor.run_target(60, 15)\r\n    base_motor.run_target(150, 0)\r\n\r\n    ev3.screen.clear()\r\n\r\n    return (pos, hgt)\r\n"
    },
    "responses": {
      "focusAnswer": "34",
      "calmAnswer": "58",
      "expectedWorkAnswer": "3",
      "finishedWorkAnswer": "4"
    }
  }
]